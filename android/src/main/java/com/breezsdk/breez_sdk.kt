// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package breez_sdk;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_breez_sdk_5d07_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_breez_sdk_5d07_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "breez_sdk_bindings"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "breez_sdk")
            .also { lib: _UniFFILib ->
                FfiConverterTypeEventListener.register(lib)
                FfiConverterTypeLogStream.register(lib)
                }
            
        }
    }

    fun ffi_breez_sdk_5d07_BlockingBreezServices_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_start(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_stop(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_send_payment(`ptr`: Pointer,`bolt11`: RustBuffer.ByValue,`amountSats`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_send_spontaneous_payment(`ptr`: Pointer,`nodeId`: RustBuffer.ByValue,`amountSats`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_receive_payment(`ptr`: Pointer,`amountSats`: Long,`description`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_pay_lnurl(`ptr`: Pointer,`reqData`: RustBuffer.ByValue,`amountSats`: Long,`comment`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_withdraw_lnurl(`ptr`: Pointer,`reqData`: RustBuffer.ByValue,`amountSats`: Long,`description`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_lnurl_auth(`ptr`: Pointer,`reqData`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_node_info(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_backup_status(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_backup(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_payment_by_hash(`ptr`: Pointer,`hash`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_list_payments(`ptr`: Pointer,`filter`: RustBuffer.ByValue,`fromTimestamp`: RustBuffer.ByValue,`toTimestamp`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_sweep(`ptr`: Pointer,`toAddress`: RustBuffer.ByValue,`feeRateSatsPerVbyte`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_fetch_fiat_rates(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_list_fiat_currencies(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_list_lsps(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_connect_lsp(`ptr`: Pointer,`lspId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_fetch_lsp_info(`ptr`: Pointer,`lspId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_lsp_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_close_lsp_channels(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_receive_onchain(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_in_progress_swap(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_list_refundables(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_refund(`ptr`: Pointer,`swapAddress`: RustBuffer.ByValue,`toAddress`: RustBuffer.ByValue,`satPerVbyte`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_fetch_reverse_swap_fees(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_in_progress_reverse_swaps(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_send_onchain(`ptr`: Pointer,`amountSat`: Long,`onchainRecipientAddress`: RustBuffer.ByValue,`pairHash`: RustBuffer.ByValue,`satPerVbyte`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_execute_dev_command(`ptr`: Pointer,`command`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_sync(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_BlockingBreezServices_recommended_fees(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_BlockingBreezServices_buy_bitcoin(`ptr`: Pointer,`provider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_breez_sdk_5d07_LogStream_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_breez_sdk_5d07_EventListener_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_register_node(`network`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,`registerCredentials`: RustBuffer.ByValue,`inviteCode`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_recover_node(`network`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_init_services(`config`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,`creds`: RustBuffer.ByValue,`listener`: Long,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun breez_sdk_5d07_set_log_stream(`logStream`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun breez_sdk_5d07_parse_invoice(`invoice`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_parse_input(`s`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_mnemonic_to_seed(`phrase`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun breez_sdk_5d07_default_config(`envType`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_breez_sdk_5d07_rustbuffer_alloc(`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_breez_sdk_5d07_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_breez_sdk_5d07_rustbuffer_free(`buf`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_breez_sdk_5d07_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterDouble: FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface BlockingBreezServicesInterface {
    
    @Throws(SdkException::class)
    fun `start`()
    
    @Throws(SdkException::class)
    fun `stop`()
    
    @Throws(SdkException::class)
    fun `sendPayment`(`bolt11`: String, `amountSats`: ULong?): Payment
    
    @Throws(SdkException::class)
    fun `sendSpontaneousPayment`(`nodeId`: String, `amountSats`: ULong): Payment
    
    @Throws(SdkException::class)
    fun `receivePayment`(`amountSats`: ULong, `description`: String): LnInvoice
    
    @Throws(SdkException::class)
    fun `payLnurl`(`reqData`: LnUrlPayRequestData, `amountSats`: ULong, `comment`: String?): LnUrlPayResult
    
    @Throws(SdkException::class)
    fun `withdrawLnurl`(`reqData`: LnUrlWithdrawRequestData, `amountSats`: ULong, `description`: String?): LnUrlCallbackStatus
    
    @Throws(SdkException::class)
    fun `lnurlAuth`(`reqData`: LnUrlAuthRequestData): LnUrlCallbackStatus
    
    @Throws(SdkException::class)
    fun `nodeInfo`(): NodeState?
    
    @Throws(SdkException::class)
    fun `backupStatus`(): BackupStatus
    
    @Throws(SdkException::class)
    fun `backup`()
    
    @Throws(SdkException::class)
    fun `paymentByHash`(`hash`: String): Payment?
    
    @Throws(SdkException::class)
    fun `listPayments`(`filter`: PaymentTypeFilter, `fromTimestamp`: Long?, `toTimestamp`: Long?): List<Payment>
    
    @Throws(SdkException::class)
    fun `sweep`(`toAddress`: String, `feeRateSatsPerVbyte`: ULong)
    
    @Throws(SdkException::class)
    fun `fetchFiatRates`(): List<Rate>
    
    @Throws(SdkException::class)
    fun `listFiatCurrencies`(): List<FiatCurrency>
    
    @Throws(SdkException::class)
    fun `listLsps`(): List<LspInformation>
    
    @Throws(SdkException::class)
    fun `connectLsp`(`lspId`: String)
    
    @Throws(SdkException::class)
    fun `fetchLspInfo`(`lspId`: String): LspInformation?
    
    @Throws(SdkException::class)
    fun `lspId`(): String?
    
    @Throws(SdkException::class)
    fun `closeLspChannels`()
    
    @Throws(SdkException::class)
    fun `receiveOnchain`(): SwapInfo
    
    @Throws(SdkException::class)
    fun `inProgressSwap`(): SwapInfo?
    
    @Throws(SdkException::class)
    fun `listRefundables`(): List<SwapInfo>
    
    @Throws(SdkException::class)
    fun `refund`(`swapAddress`: String, `toAddress`: String, `satPerVbyte`: UInt): String
    
    @Throws(SdkException::class)
    fun `fetchReverseSwapFees`(): ReverseSwapPairInfo
    
    @Throws(SdkException::class)
    fun `inProgressReverseSwaps`(): List<ReverseSwapInfo>
    
    @Throws(SdkException::class)
    fun `sendOnchain`(`amountSat`: ULong, `onchainRecipientAddress`: String, `pairHash`: String, `satPerVbyte`: ULong): ReverseSwapInfo
    
    @Throws(SdkException::class)
    fun `executeDevCommand`(`command`: String): String
    
    @Throws(SdkException::class)
    fun `sync`()
    
    @Throws(SdkException::class)
    fun `recommendedFees`(): RecommendedFees
    
    @Throws(SdkException::class)
    fun `buyBitcoin`(`provider`: BuyBitcoinProvider): String
    
}

class BlockingBreezServices(
    pointer: Pointer
) : FFIObject(pointer), BlockingBreezServicesInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_breez_sdk_5d07_BlockingBreezServices_object_free(this.pointer, status)
        }
    }

    
    @Throws(SdkException::class)override fun `start`() =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_start(it,  _status)
}
        }
    
    
    @Throws(SdkException::class)override fun `stop`() =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_stop(it,  _status)
}
        }
    
    
    @Throws(SdkException::class)override fun `sendPayment`(`bolt11`: String, `amountSats`: ULong?): Payment =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_send_payment(it, FfiConverterString.lower(`bolt11`), FfiConverterOptionalULong.lower(`amountSats`),  _status)
}
        }.let {
            FfiConverterTypePayment.lift(it)
        }
    
    @Throws(SdkException::class)override fun `sendSpontaneousPayment`(`nodeId`: String, `amountSats`: ULong): Payment =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_send_spontaneous_payment(it, FfiConverterString.lower(`nodeId`), FfiConverterULong.lower(`amountSats`),  _status)
}
        }.let {
            FfiConverterTypePayment.lift(it)
        }
    
    @Throws(SdkException::class)override fun `receivePayment`(`amountSats`: ULong, `description`: String): LnInvoice =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_receive_payment(it, FfiConverterULong.lower(`amountSats`), FfiConverterString.lower(`description`),  _status)
}
        }.let {
            FfiConverterTypeLnInvoice.lift(it)
        }
    
    @Throws(SdkException::class)override fun `payLnurl`(`reqData`: LnUrlPayRequestData, `amountSats`: ULong, `comment`: String?): LnUrlPayResult =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_pay_lnurl(it, FfiConverterTypeLnUrlPayRequestData.lower(`reqData`), FfiConverterULong.lower(`amountSats`), FfiConverterOptionalString.lower(`comment`),  _status)
}
        }.let {
            FfiConverterTypeLnUrlPayResult.lift(it)
        }
    
    @Throws(SdkException::class)override fun `withdrawLnurl`(`reqData`: LnUrlWithdrawRequestData, `amountSats`: ULong, `description`: String?): LnUrlCallbackStatus =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_withdraw_lnurl(it, FfiConverterTypeLnUrlWithdrawRequestData.lower(`reqData`), FfiConverterULong.lower(`amountSats`), FfiConverterOptionalString.lower(`description`),  _status)
}
        }.let {
            FfiConverterTypeLnUrlCallbackStatus.lift(it)
        }
    
    @Throws(SdkException::class)override fun `lnurlAuth`(`reqData`: LnUrlAuthRequestData): LnUrlCallbackStatus =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_lnurl_auth(it, FfiConverterTypeLnUrlAuthRequestData.lower(`reqData`),  _status)
}
        }.let {
            FfiConverterTypeLnUrlCallbackStatus.lift(it)
        }
    
    @Throws(SdkException::class)override fun `nodeInfo`(): NodeState? =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_node_info(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeNodeState.lift(it)
        }
    
    @Throws(SdkException::class)override fun `backupStatus`(): BackupStatus =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_backup_status(it,  _status)
}
        }.let {
            FfiConverterTypeBackupStatus.lift(it)
        }
    
    @Throws(SdkException::class)override fun `backup`() =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_backup(it,  _status)
}
        }
    
    
    @Throws(SdkException::class)override fun `paymentByHash`(`hash`: String): Payment? =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_payment_by_hash(it, FfiConverterString.lower(`hash`),  _status)
}
        }.let {
            FfiConverterOptionalTypePayment.lift(it)
        }
    
    @Throws(SdkException::class)override fun `listPayments`(`filter`: PaymentTypeFilter, `fromTimestamp`: Long?, `toTimestamp`: Long?): List<Payment> =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_list_payments(it, FfiConverterTypePaymentTypeFilter.lower(`filter`), FfiConverterOptionalLong.lower(`fromTimestamp`), FfiConverterOptionalLong.lower(`toTimestamp`),  _status)
}
        }.let {
            FfiConverterSequenceTypePayment.lift(it)
        }
    
    @Throws(SdkException::class)override fun `sweep`(`toAddress`: String, `feeRateSatsPerVbyte`: ULong) =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_sweep(it, FfiConverterString.lower(`toAddress`), FfiConverterULong.lower(`feeRateSatsPerVbyte`),  _status)
}
        }
    
    
    @Throws(SdkException::class)override fun `fetchFiatRates`(): List<Rate> =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_fetch_fiat_rates(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeRate.lift(it)
        }
    
    @Throws(SdkException::class)override fun `listFiatCurrencies`(): List<FiatCurrency> =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_list_fiat_currencies(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeFiatCurrency.lift(it)
        }
    
    @Throws(SdkException::class)override fun `listLsps`(): List<LspInformation> =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_list_lsps(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeLspInformation.lift(it)
        }
    
    @Throws(SdkException::class)override fun `connectLsp`(`lspId`: String) =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_connect_lsp(it, FfiConverterString.lower(`lspId`),  _status)
}
        }
    
    
    @Throws(SdkException::class)override fun `fetchLspInfo`(`lspId`: String): LspInformation? =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_fetch_lsp_info(it, FfiConverterString.lower(`lspId`),  _status)
}
        }.let {
            FfiConverterOptionalTypeLspInformation.lift(it)
        }
    
    @Throws(SdkException::class)override fun `lspId`(): String? =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_lsp_id(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(SdkException::class)override fun `closeLspChannels`() =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_close_lsp_channels(it,  _status)
}
        }
    
    
    @Throws(SdkException::class)override fun `receiveOnchain`(): SwapInfo =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_receive_onchain(it,  _status)
}
        }.let {
            FfiConverterTypeSwapInfo.lift(it)
        }
    
    @Throws(SdkException::class)override fun `inProgressSwap`(): SwapInfo? =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_in_progress_swap(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeSwapInfo.lift(it)
        }
    
    @Throws(SdkException::class)override fun `listRefundables`(): List<SwapInfo> =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_list_refundables(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeSwapInfo.lift(it)
        }
    
    @Throws(SdkException::class)override fun `refund`(`swapAddress`: String, `toAddress`: String, `satPerVbyte`: UInt): String =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_refund(it, FfiConverterString.lower(`swapAddress`), FfiConverterString.lower(`toAddress`), FfiConverterUInt.lower(`satPerVbyte`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    @Throws(SdkException::class)override fun `fetchReverseSwapFees`(): ReverseSwapPairInfo =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_fetch_reverse_swap_fees(it,  _status)
}
        }.let {
            FfiConverterTypeReverseSwapPairInfo.lift(it)
        }
    
    @Throws(SdkException::class)override fun `inProgressReverseSwaps`(): List<ReverseSwapInfo> =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_in_progress_reverse_swaps(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeReverseSwapInfo.lift(it)
        }
    
    @Throws(SdkException::class)override fun `sendOnchain`(`amountSat`: ULong, `onchainRecipientAddress`: String, `pairHash`: String, `satPerVbyte`: ULong): ReverseSwapInfo =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_send_onchain(it, FfiConverterULong.lower(`amountSat`), FfiConverterString.lower(`onchainRecipientAddress`), FfiConverterString.lower(`pairHash`), FfiConverterULong.lower(`satPerVbyte`),  _status)
}
        }.let {
            FfiConverterTypeReverseSwapInfo.lift(it)
        }
    
    @Throws(SdkException::class)override fun `executeDevCommand`(`command`: String): String =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_execute_dev_command(it, FfiConverterString.lower(`command`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    @Throws(SdkException::class)override fun `sync`() =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_sync(it,  _status)
}
        }
    
    
    @Throws(SdkException::class)override fun `recommendedFees`(): RecommendedFees =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_recommended_fees(it,  _status)
}
        }.let {
            FfiConverterTypeRecommendedFees.lift(it)
        }
    
    @Throws(SdkException::class)override fun `buyBitcoin`(`provider`: BuyBitcoinProvider): String =
        callWithPointer {
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_BlockingBreezServices_buy_bitcoin(it, FfiConverterTypeBuyBitcoinProvider.lower(`provider`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    

    
}

public object FfiConverterTypeBlockingBreezServices: FfiConverter<BlockingBreezServices, Pointer> {
    override fun lower(value: BlockingBreezServices): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BlockingBreezServices {
        return BlockingBreezServices(value)
    }

    override fun read(buf: ByteBuffer): BlockingBreezServices {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BlockingBreezServices) = 8

    override fun write(value: BlockingBreezServices, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class AesSuccessActionDataDecrypted (
    var `description`: String, 
    var `plaintext`: String
) {
    
}

public object FfiConverterTypeAesSuccessActionDataDecrypted: FfiConverterRustBuffer<AesSuccessActionDataDecrypted> {
    override fun read(buf: ByteBuffer): AesSuccessActionDataDecrypted {
        return AesSuccessActionDataDecrypted(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: AesSuccessActionDataDecrypted) = (
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterString.allocationSize(value.`plaintext`)
    )

    override fun write(value: AesSuccessActionDataDecrypted, buf: ByteBuffer) {
            FfiConverterString.write(value.`description`, buf)
            FfiConverterString.write(value.`plaintext`, buf)
    }
}




data class BackupFailedData (
    var `error`: String
) {
    
}

public object FfiConverterTypeBackupFailedData: FfiConverterRustBuffer<BackupFailedData> {
    override fun read(buf: ByteBuffer): BackupFailedData {
        return BackupFailedData(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: BackupFailedData) = (
            FfiConverterString.allocationSize(value.`error`)
    )

    override fun write(value: BackupFailedData, buf: ByteBuffer) {
            FfiConverterString.write(value.`error`, buf)
    }
}




data class BackupStatus (
    var `backedUp`: Boolean, 
    var `lastBackupTime`: ULong?
) {
    
}

public object FfiConverterTypeBackupStatus: FfiConverterRustBuffer<BackupStatus> {
    override fun read(buf: ByteBuffer): BackupStatus {
        return BackupStatus(
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: BackupStatus) = (
            FfiConverterBoolean.allocationSize(value.`backedUp`) +
            FfiConverterOptionalULong.allocationSize(value.`lastBackupTime`)
    )

    override fun write(value: BackupStatus, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`backedUp`, buf)
            FfiConverterOptionalULong.write(value.`lastBackupTime`, buf)
    }
}




data class BitcoinAddressData (
    var `address`: String, 
    var `network`: Network, 
    var `amountSat`: ULong?, 
    var `label`: String?, 
    var `message`: String?
) {
    
}

public object FfiConverterTypeBitcoinAddressData: FfiConverterRustBuffer<BitcoinAddressData> {
    override fun read(buf: ByteBuffer): BitcoinAddressData {
        return BitcoinAddressData(
            FfiConverterString.read(buf),
            FfiConverterTypeNetwork.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: BitcoinAddressData) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterTypeNetwork.allocationSize(value.`network`) +
            FfiConverterOptionalULong.allocationSize(value.`amountSat`) +
            FfiConverterOptionalString.allocationSize(value.`label`) +
            FfiConverterOptionalString.allocationSize(value.`message`)
    )

    override fun write(value: BitcoinAddressData, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterTypeNetwork.write(value.`network`, buf)
            FfiConverterOptionalULong.write(value.`amountSat`, buf)
            FfiConverterOptionalString.write(value.`label`, buf)
            FfiConverterOptionalString.write(value.`message`, buf)
    }
}




data class ClosedChannelPaymentDetails (
    var `shortChannelId`: String, 
    var `state`: ChannelState, 
    var `fundingTxid`: String
) {
    
}

public object FfiConverterTypeClosedChannelPaymentDetails: FfiConverterRustBuffer<ClosedChannelPaymentDetails> {
    override fun read(buf: ByteBuffer): ClosedChannelPaymentDetails {
        return ClosedChannelPaymentDetails(
            FfiConverterString.read(buf),
            FfiConverterTypeChannelState.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ClosedChannelPaymentDetails) = (
            FfiConverterString.allocationSize(value.`shortChannelId`) +
            FfiConverterTypeChannelState.allocationSize(value.`state`) +
            FfiConverterString.allocationSize(value.`fundingTxid`)
    )

    override fun write(value: ClosedChannelPaymentDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`shortChannelId`, buf)
            FfiConverterTypeChannelState.write(value.`state`, buf)
            FfiConverterString.write(value.`fundingTxid`, buf)
    }
}




data class Config (
    var `breezserver`: String, 
    var `mempoolspaceUrl`: String, 
    var `workingDir`: String, 
    var `network`: Network, 
    var `paymentTimeoutSec`: UInt, 
    var `defaultLspId`: String?, 
    var `apiKey`: String?, 
    var `maxfeePercent`: Double
) {
    
}

public object FfiConverterTypeConfig: FfiConverterRustBuffer<Config> {
    override fun read(buf: ByteBuffer): Config {
        return Config(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeNetwork.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterDouble.read(buf),
        )
    }

    override fun allocationSize(value: Config) = (
            FfiConverterString.allocationSize(value.`breezserver`) +
            FfiConverterString.allocationSize(value.`mempoolspaceUrl`) +
            FfiConverterString.allocationSize(value.`workingDir`) +
            FfiConverterTypeNetwork.allocationSize(value.`network`) +
            FfiConverterUInt.allocationSize(value.`paymentTimeoutSec`) +
            FfiConverterOptionalString.allocationSize(value.`defaultLspId`) +
            FfiConverterOptionalString.allocationSize(value.`apiKey`) +
            FfiConverterDouble.allocationSize(value.`maxfeePercent`)
    )

    override fun write(value: Config, buf: ByteBuffer) {
            FfiConverterString.write(value.`breezserver`, buf)
            FfiConverterString.write(value.`mempoolspaceUrl`, buf)
            FfiConverterString.write(value.`workingDir`, buf)
            FfiConverterTypeNetwork.write(value.`network`, buf)
            FfiConverterUInt.write(value.`paymentTimeoutSec`, buf)
            FfiConverterOptionalString.write(value.`defaultLspId`, buf)
            FfiConverterOptionalString.write(value.`apiKey`, buf)
            FfiConverterDouble.write(value.`maxfeePercent`, buf)
    }
}




data class CurrencyInfo (
    var `name`: String, 
    var `fractionSize`: UInt, 
    var `spacing`: UInt?, 
    var `symbol`: Symbol?, 
    var `uniqSymbol`: Symbol?, 
    var `localizedName`: List<LocalizedName>?, 
    var `localeOverrides`: List<LocaleOverrides>?
) {
    
}

public object FfiConverterTypeCurrencyInfo: FfiConverterRustBuffer<CurrencyInfo> {
    override fun read(buf: ByteBuffer): CurrencyInfo {
        return CurrencyInfo(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalTypeSymbol.read(buf),
            FfiConverterOptionalTypeSymbol.read(buf),
            FfiConverterOptionalSequenceTypeLocalizedName.read(buf),
            FfiConverterOptionalSequenceTypeLocaleOverrides.read(buf),
        )
    }

    override fun allocationSize(value: CurrencyInfo) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterUInt.allocationSize(value.`fractionSize`) +
            FfiConverterOptionalUInt.allocationSize(value.`spacing`) +
            FfiConverterOptionalTypeSymbol.allocationSize(value.`symbol`) +
            FfiConverterOptionalTypeSymbol.allocationSize(value.`uniqSymbol`) +
            FfiConverterOptionalSequenceTypeLocalizedName.allocationSize(value.`localizedName`) +
            FfiConverterOptionalSequenceTypeLocaleOverrides.allocationSize(value.`localeOverrides`)
    )

    override fun write(value: CurrencyInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterUInt.write(value.`fractionSize`, buf)
            FfiConverterOptionalUInt.write(value.`spacing`, buf)
            FfiConverterOptionalTypeSymbol.write(value.`symbol`, buf)
            FfiConverterOptionalTypeSymbol.write(value.`uniqSymbol`, buf)
            FfiConverterOptionalSequenceTypeLocalizedName.write(value.`localizedName`, buf)
            FfiConverterOptionalSequenceTypeLocaleOverrides.write(value.`localeOverrides`, buf)
    }
}




data class FiatCurrency (
    var `id`: String, 
    var `info`: CurrencyInfo
) {
    
}

public object FfiConverterTypeFiatCurrency: FfiConverterRustBuffer<FiatCurrency> {
    override fun read(buf: ByteBuffer): FiatCurrency {
        return FiatCurrency(
            FfiConverterString.read(buf),
            FfiConverterTypeCurrencyInfo.read(buf),
        )
    }

    override fun allocationSize(value: FiatCurrency) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypeCurrencyInfo.allocationSize(value.`info`)
    )

    override fun write(value: FiatCurrency, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypeCurrencyInfo.write(value.`info`, buf)
    }
}




data class GreenlightCredentials (
    var `deviceKey`: List<UByte>, 
    var `deviceCert`: List<UByte>
) {
    
}

public object FfiConverterTypeGreenlightCredentials: FfiConverterRustBuffer<GreenlightCredentials> {
    override fun read(buf: ByteBuffer): GreenlightCredentials {
        return GreenlightCredentials(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: GreenlightCredentials) = (
            FfiConverterSequenceUByte.allocationSize(value.`deviceKey`) +
            FfiConverterSequenceUByte.allocationSize(value.`deviceCert`)
    )

    override fun write(value: GreenlightCredentials, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`deviceKey`, buf)
            FfiConverterSequenceUByte.write(value.`deviceCert`, buf)
    }
}




data class InvoicePaidDetails (
    var `paymentHash`: String, 
    var `bolt11`: String
) {
    
}

public object FfiConverterTypeInvoicePaidDetails: FfiConverterRustBuffer<InvoicePaidDetails> {
    override fun read(buf: ByteBuffer): InvoicePaidDetails {
        return InvoicePaidDetails(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: InvoicePaidDetails) = (
            FfiConverterString.allocationSize(value.`paymentHash`) +
            FfiConverterString.allocationSize(value.`bolt11`)
    )

    override fun write(value: InvoicePaidDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`paymentHash`, buf)
            FfiConverterString.write(value.`bolt11`, buf)
    }
}




data class LnInvoice (
    var `bolt11`: String, 
    var `payeePubkey`: String, 
    var `paymentHash`: String, 
    var `description`: String?, 
    var `descriptionHash`: String?, 
    var `amountMsat`: ULong?, 
    var `timestamp`: ULong, 
    var `expiry`: ULong, 
    var `routingHints`: List<RouteHint>, 
    var `paymentSecret`: List<UByte>
) {
    
}

public object FfiConverterTypeLnInvoice: FfiConverterRustBuffer<LnInvoice> {
    override fun read(buf: ByteBuffer): LnInvoice {
        return LnInvoice(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceTypeRouteHint.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: LnInvoice) = (
            FfiConverterString.allocationSize(value.`bolt11`) +
            FfiConverterString.allocationSize(value.`payeePubkey`) +
            FfiConverterString.allocationSize(value.`paymentHash`) +
            FfiConverterOptionalString.allocationSize(value.`description`) +
            FfiConverterOptionalString.allocationSize(value.`descriptionHash`) +
            FfiConverterOptionalULong.allocationSize(value.`amountMsat`) +
            FfiConverterULong.allocationSize(value.`timestamp`) +
            FfiConverterULong.allocationSize(value.`expiry`) +
            FfiConverterSequenceTypeRouteHint.allocationSize(value.`routingHints`) +
            FfiConverterSequenceUByte.allocationSize(value.`paymentSecret`)
    )

    override fun write(value: LnInvoice, buf: ByteBuffer) {
            FfiConverterString.write(value.`bolt11`, buf)
            FfiConverterString.write(value.`payeePubkey`, buf)
            FfiConverterString.write(value.`paymentHash`, buf)
            FfiConverterOptionalString.write(value.`description`, buf)
            FfiConverterOptionalString.write(value.`descriptionHash`, buf)
            FfiConverterOptionalULong.write(value.`amountMsat`, buf)
            FfiConverterULong.write(value.`timestamp`, buf)
            FfiConverterULong.write(value.`expiry`, buf)
            FfiConverterSequenceTypeRouteHint.write(value.`routingHints`, buf)
            FfiConverterSequenceUByte.write(value.`paymentSecret`, buf)
    }
}




data class LnPaymentDetails (
    var `paymentHash`: String, 
    var `label`: String, 
    var `destinationPubkey`: String, 
    var `paymentPreimage`: String, 
    var `keysend`: Boolean, 
    var `bolt11`: String, 
    var `lnurlSuccessAction`: SuccessActionProcessed?, 
    var `lnurlMetadata`: String?, 
    var `lnAddress`: String?
) {
    
}

public object FfiConverterTypeLnPaymentDetails: FfiConverterRustBuffer<LnPaymentDetails> {
    override fun read(buf: ByteBuffer): LnPaymentDetails {
        return LnPaymentDetails(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeSuccessActionProcessed.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: LnPaymentDetails) = (
            FfiConverterString.allocationSize(value.`paymentHash`) +
            FfiConverterString.allocationSize(value.`label`) +
            FfiConverterString.allocationSize(value.`destinationPubkey`) +
            FfiConverterString.allocationSize(value.`paymentPreimage`) +
            FfiConverterBoolean.allocationSize(value.`keysend`) +
            FfiConverterString.allocationSize(value.`bolt11`) +
            FfiConverterOptionalTypeSuccessActionProcessed.allocationSize(value.`lnurlSuccessAction`) +
            FfiConverterOptionalString.allocationSize(value.`lnurlMetadata`) +
            FfiConverterOptionalString.allocationSize(value.`lnAddress`)
    )

    override fun write(value: LnPaymentDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`paymentHash`, buf)
            FfiConverterString.write(value.`label`, buf)
            FfiConverterString.write(value.`destinationPubkey`, buf)
            FfiConverterString.write(value.`paymentPreimage`, buf)
            FfiConverterBoolean.write(value.`keysend`, buf)
            FfiConverterString.write(value.`bolt11`, buf)
            FfiConverterOptionalTypeSuccessActionProcessed.write(value.`lnurlSuccessAction`, buf)
            FfiConverterOptionalString.write(value.`lnurlMetadata`, buf)
            FfiConverterOptionalString.write(value.`lnAddress`, buf)
    }
}




data class LnUrlAuthRequestData (
    var `k1`: String, 
    var `action`: String?, 
    var `domain`: String, 
    var `url`: String
) {
    
}

public object FfiConverterTypeLnUrlAuthRequestData: FfiConverterRustBuffer<LnUrlAuthRequestData> {
    override fun read(buf: ByteBuffer): LnUrlAuthRequestData {
        return LnUrlAuthRequestData(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlAuthRequestData) = (
            FfiConverterString.allocationSize(value.`k1`) +
            FfiConverterOptionalString.allocationSize(value.`action`) +
            FfiConverterString.allocationSize(value.`domain`) +
            FfiConverterString.allocationSize(value.`url`)
    )

    override fun write(value: LnUrlAuthRequestData, buf: ByteBuffer) {
            FfiConverterString.write(value.`k1`, buf)
            FfiConverterOptionalString.write(value.`action`, buf)
            FfiConverterString.write(value.`domain`, buf)
            FfiConverterString.write(value.`url`, buf)
    }
}




data class LnUrlErrorData (
    var `reason`: String
) {
    
}

public object FfiConverterTypeLnUrlErrorData: FfiConverterRustBuffer<LnUrlErrorData> {
    override fun read(buf: ByteBuffer): LnUrlErrorData {
        return LnUrlErrorData(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlErrorData) = (
            FfiConverterString.allocationSize(value.`reason`)
    )

    override fun write(value: LnUrlErrorData, buf: ByteBuffer) {
            FfiConverterString.write(value.`reason`, buf)
    }
}




data class LnUrlPayRequestData (
    var `callback`: String, 
    var `minSendable`: ULong, 
    var `maxSendable`: ULong, 
    var `metadataStr`: String, 
    var `commentAllowed`: UShort, 
    var `domain`: String, 
    var `lnAddress`: String?
) {
    
}

public object FfiConverterTypeLnUrlPayRequestData: FfiConverterRustBuffer<LnUrlPayRequestData> {
    override fun read(buf: ByteBuffer): LnUrlPayRequestData {
        return LnUrlPayRequestData(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlPayRequestData) = (
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterULong.allocationSize(value.`minSendable`) +
            FfiConverterULong.allocationSize(value.`maxSendable`) +
            FfiConverterString.allocationSize(value.`metadataStr`) +
            FfiConverterUShort.allocationSize(value.`commentAllowed`) +
            FfiConverterString.allocationSize(value.`domain`) +
            FfiConverterOptionalString.allocationSize(value.`lnAddress`)
    )

    override fun write(value: LnUrlPayRequestData, buf: ByteBuffer) {
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterULong.write(value.`minSendable`, buf)
            FfiConverterULong.write(value.`maxSendable`, buf)
            FfiConverterString.write(value.`metadataStr`, buf)
            FfiConverterUShort.write(value.`commentAllowed`, buf)
            FfiConverterString.write(value.`domain`, buf)
            FfiConverterOptionalString.write(value.`lnAddress`, buf)
    }
}




data class LnUrlWithdrawRequestData (
    var `callback`: String, 
    var `k1`: String, 
    var `defaultDescription`: String, 
    var `minWithdrawable`: ULong, 
    var `maxWithdrawable`: ULong
) {
    
}

public object FfiConverterTypeLnUrlWithdrawRequestData: FfiConverterRustBuffer<LnUrlWithdrawRequestData> {
    override fun read(buf: ByteBuffer): LnUrlWithdrawRequestData {
        return LnUrlWithdrawRequestData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlWithdrawRequestData) = (
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterString.allocationSize(value.`k1`) +
            FfiConverterString.allocationSize(value.`defaultDescription`) +
            FfiConverterULong.allocationSize(value.`minWithdrawable`) +
            FfiConverterULong.allocationSize(value.`maxWithdrawable`)
    )

    override fun write(value: LnUrlWithdrawRequestData, buf: ByteBuffer) {
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterString.write(value.`k1`, buf)
            FfiConverterString.write(value.`defaultDescription`, buf)
            FfiConverterULong.write(value.`minWithdrawable`, buf)
            FfiConverterULong.write(value.`maxWithdrawable`, buf)
    }
}




data class LocaleOverrides (
    var `locale`: String, 
    var `spacing`: UInt?, 
    var `symbol`: Symbol
) {
    
}

public object FfiConverterTypeLocaleOverrides: FfiConverterRustBuffer<LocaleOverrides> {
    override fun read(buf: ByteBuffer): LocaleOverrides {
        return LocaleOverrides(
            FfiConverterString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterTypeSymbol.read(buf),
        )
    }

    override fun allocationSize(value: LocaleOverrides) = (
            FfiConverterString.allocationSize(value.`locale`) +
            FfiConverterOptionalUInt.allocationSize(value.`spacing`) +
            FfiConverterTypeSymbol.allocationSize(value.`symbol`)
    )

    override fun write(value: LocaleOverrides, buf: ByteBuffer) {
            FfiConverterString.write(value.`locale`, buf)
            FfiConverterOptionalUInt.write(value.`spacing`, buf)
            FfiConverterTypeSymbol.write(value.`symbol`, buf)
    }
}




data class LocalizedName (
    var `locale`: String, 
    var `name`: String
) {
    
}

public object FfiConverterTypeLocalizedName: FfiConverterRustBuffer<LocalizedName> {
    override fun read(buf: ByteBuffer): LocalizedName {
        return LocalizedName(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LocalizedName) = (
            FfiConverterString.allocationSize(value.`locale`) +
            FfiConverterString.allocationSize(value.`name`)
    )

    override fun write(value: LocalizedName, buf: ByteBuffer) {
            FfiConverterString.write(value.`locale`, buf)
            FfiConverterString.write(value.`name`, buf)
    }
}




data class LogEntry (
    var `line`: String, 
    var `level`: String
) {
    
}

public object FfiConverterTypeLogEntry: FfiConverterRustBuffer<LogEntry> {
    override fun read(buf: ByteBuffer): LogEntry {
        return LogEntry(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LogEntry) = (
            FfiConverterString.allocationSize(value.`line`) +
            FfiConverterString.allocationSize(value.`level`)
    )

    override fun write(value: LogEntry, buf: ByteBuffer) {
            FfiConverterString.write(value.`line`, buf)
            FfiConverterString.write(value.`level`, buf)
    }
}




data class LspInformation (
    var `id`: String, 
    var `name`: String, 
    var `widgetUrl`: String, 
    var `pubkey`: String, 
    var `host`: String, 
    var `channelCapacity`: Long, 
    var `targetConf`: Int, 
    var `baseFeeMsat`: Long, 
    var `feeRate`: Double, 
    var `timeLockDelta`: UInt, 
    var `minHtlcMsat`: Long, 
    var `channelFeePermyriad`: Long, 
    var `lspPubkey`: List<UByte>, 
    var `maxInactiveDuration`: Long, 
    var `channelMinimumFeeMsat`: Long
) {
    
}

public object FfiConverterTypeLspInformation: FfiConverterRustBuffer<LspInformation> {
    override fun read(buf: ByteBuffer): LspInformation {
        return LspInformation(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: LspInformation) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`widgetUrl`) +
            FfiConverterString.allocationSize(value.`pubkey`) +
            FfiConverterString.allocationSize(value.`host`) +
            FfiConverterLong.allocationSize(value.`channelCapacity`) +
            FfiConverterInt.allocationSize(value.`targetConf`) +
            FfiConverterLong.allocationSize(value.`baseFeeMsat`) +
            FfiConverterDouble.allocationSize(value.`feeRate`) +
            FfiConverterUInt.allocationSize(value.`timeLockDelta`) +
            FfiConverterLong.allocationSize(value.`minHtlcMsat`) +
            FfiConverterLong.allocationSize(value.`channelFeePermyriad`) +
            FfiConverterSequenceUByte.allocationSize(value.`lspPubkey`) +
            FfiConverterLong.allocationSize(value.`maxInactiveDuration`) +
            FfiConverterLong.allocationSize(value.`channelMinimumFeeMsat`)
    )

    override fun write(value: LspInformation, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`widgetUrl`, buf)
            FfiConverterString.write(value.`pubkey`, buf)
            FfiConverterString.write(value.`host`, buf)
            FfiConverterLong.write(value.`channelCapacity`, buf)
            FfiConverterInt.write(value.`targetConf`, buf)
            FfiConverterLong.write(value.`baseFeeMsat`, buf)
            FfiConverterDouble.write(value.`feeRate`, buf)
            FfiConverterUInt.write(value.`timeLockDelta`, buf)
            FfiConverterLong.write(value.`minHtlcMsat`, buf)
            FfiConverterLong.write(value.`channelFeePermyriad`, buf)
            FfiConverterSequenceUByte.write(value.`lspPubkey`, buf)
            FfiConverterLong.write(value.`maxInactiveDuration`, buf)
            FfiConverterLong.write(value.`channelMinimumFeeMsat`, buf)
    }
}




data class MessageSuccessActionData (
    var `message`: String
) {
    
}

public object FfiConverterTypeMessageSuccessActionData: FfiConverterRustBuffer<MessageSuccessActionData> {
    override fun read(buf: ByteBuffer): MessageSuccessActionData {
        return MessageSuccessActionData(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: MessageSuccessActionData) = (
            FfiConverterString.allocationSize(value.`message`)
    )

    override fun write(value: MessageSuccessActionData, buf: ByteBuffer) {
            FfiConverterString.write(value.`message`, buf)
    }
}




data class MetadataItem (
    var `key`: String, 
    var `value`: String
) {
    
}

public object FfiConverterTypeMetadataItem: FfiConverterRustBuffer<MetadataItem> {
    override fun read(buf: ByteBuffer): MetadataItem {
        return MetadataItem(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: MetadataItem) = (
            FfiConverterString.allocationSize(value.`key`) +
            FfiConverterString.allocationSize(value.`value`)
    )

    override fun write(value: MetadataItem, buf: ByteBuffer) {
            FfiConverterString.write(value.`key`, buf)
            FfiConverterString.write(value.`value`, buf)
    }
}




data class NodeState (
    var `id`: String, 
    var `blockHeight`: UInt, 
    var `channelsBalanceMsat`: ULong, 
    var `onchainBalanceMsat`: ULong, 
    var `utxos`: List<UnspentTransactionOutput>, 
    var `maxPayableMsat`: ULong, 
    var `maxReceivableMsat`: ULong, 
    var `maxSinglePaymentAmountMsat`: ULong, 
    var `maxChanReserveMsats`: ULong, 
    var `connectedPeers`: List<String>, 
    var `inboundLiquidityMsats`: ULong
) {
    
}

public object FfiConverterTypeNodeState: FfiConverterRustBuffer<NodeState> {
    override fun read(buf: ByteBuffer): NodeState {
        return NodeState(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceTypeUnspentTransactionOutput.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: NodeState) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterUInt.allocationSize(value.`blockHeight`) +
            FfiConverterULong.allocationSize(value.`channelsBalanceMsat`) +
            FfiConverterULong.allocationSize(value.`onchainBalanceMsat`) +
            FfiConverterSequenceTypeUnspentTransactionOutput.allocationSize(value.`utxos`) +
            FfiConverterULong.allocationSize(value.`maxPayableMsat`) +
            FfiConverterULong.allocationSize(value.`maxReceivableMsat`) +
            FfiConverterULong.allocationSize(value.`maxSinglePaymentAmountMsat`) +
            FfiConverterULong.allocationSize(value.`maxChanReserveMsats`) +
            FfiConverterSequenceString.allocationSize(value.`connectedPeers`) +
            FfiConverterULong.allocationSize(value.`inboundLiquidityMsats`)
    )

    override fun write(value: NodeState, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterUInt.write(value.`blockHeight`, buf)
            FfiConverterULong.write(value.`channelsBalanceMsat`, buf)
            FfiConverterULong.write(value.`onchainBalanceMsat`, buf)
            FfiConverterSequenceTypeUnspentTransactionOutput.write(value.`utxos`, buf)
            FfiConverterULong.write(value.`maxPayableMsat`, buf)
            FfiConverterULong.write(value.`maxReceivableMsat`, buf)
            FfiConverterULong.write(value.`maxSinglePaymentAmountMsat`, buf)
            FfiConverterULong.write(value.`maxChanReserveMsats`, buf)
            FfiConverterSequenceString.write(value.`connectedPeers`, buf)
            FfiConverterULong.write(value.`inboundLiquidityMsats`, buf)
    }
}




data class Payment (
    var `id`: String, 
    var `paymentType`: PaymentType, 
    var `paymentTime`: Long, 
    var `amountMsat`: ULong, 
    var `feeMsat`: ULong, 
    var `pending`: Boolean, 
    var `description`: String?, 
    var `details`: PaymentDetails
) {
    
}

public object FfiConverterTypePayment: FfiConverterRustBuffer<Payment> {
    override fun read(buf: ByteBuffer): Payment {
        return Payment(
            FfiConverterString.read(buf),
            FfiConverterTypePaymentType.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypePaymentDetails.read(buf),
        )
    }

    override fun allocationSize(value: Payment) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypePaymentType.allocationSize(value.`paymentType`) +
            FfiConverterLong.allocationSize(value.`paymentTime`) +
            FfiConverterULong.allocationSize(value.`amountMsat`) +
            FfiConverterULong.allocationSize(value.`feeMsat`) +
            FfiConverterBoolean.allocationSize(value.`pending`) +
            FfiConverterOptionalString.allocationSize(value.`description`) +
            FfiConverterTypePaymentDetails.allocationSize(value.`details`)
    )

    override fun write(value: Payment, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypePaymentType.write(value.`paymentType`, buf)
            FfiConverterLong.write(value.`paymentTime`, buf)
            FfiConverterULong.write(value.`amountMsat`, buf)
            FfiConverterULong.write(value.`feeMsat`, buf)
            FfiConverterBoolean.write(value.`pending`, buf)
            FfiConverterOptionalString.write(value.`description`, buf)
            FfiConverterTypePaymentDetails.write(value.`details`, buf)
    }
}




data class PaymentFailedData (
    var `error`: String, 
    var `nodeId`: String, 
    var `invoice`: LnInvoice?
) {
    
}

public object FfiConverterTypePaymentFailedData: FfiConverterRustBuffer<PaymentFailedData> {
    override fun read(buf: ByteBuffer): PaymentFailedData {
        return PaymentFailedData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeLnInvoice.read(buf),
        )
    }

    override fun allocationSize(value: PaymentFailedData) = (
            FfiConverterString.allocationSize(value.`error`) +
            FfiConverterString.allocationSize(value.`nodeId`) +
            FfiConverterOptionalTypeLnInvoice.allocationSize(value.`invoice`)
    )

    override fun write(value: PaymentFailedData, buf: ByteBuffer) {
            FfiConverterString.write(value.`error`, buf)
            FfiConverterString.write(value.`nodeId`, buf)
            FfiConverterOptionalTypeLnInvoice.write(value.`invoice`, buf)
    }
}




data class Rate (
    var `coin`: String, 
    var `value`: Double
) {
    
}

public object FfiConverterTypeRate: FfiConverterRustBuffer<Rate> {
    override fun read(buf: ByteBuffer): Rate {
        return Rate(
            FfiConverterString.read(buf),
            FfiConverterDouble.read(buf),
        )
    }

    override fun allocationSize(value: Rate) = (
            FfiConverterString.allocationSize(value.`coin`) +
            FfiConverterDouble.allocationSize(value.`value`)
    )

    override fun write(value: Rate, buf: ByteBuffer) {
            FfiConverterString.write(value.`coin`, buf)
            FfiConverterDouble.write(value.`value`, buf)
    }
}




data class RecommendedFees (
    var `fastestFee`: ULong, 
    var `halfHourFee`: ULong, 
    var `hourFee`: ULong, 
    var `economyFee`: ULong, 
    var `minimumFee`: ULong
) {
    
}

public object FfiConverterTypeRecommendedFees: FfiConverterRustBuffer<RecommendedFees> {
    override fun read(buf: ByteBuffer): RecommendedFees {
        return RecommendedFees(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: RecommendedFees) = (
            FfiConverterULong.allocationSize(value.`fastestFee`) +
            FfiConverterULong.allocationSize(value.`halfHourFee`) +
            FfiConverterULong.allocationSize(value.`hourFee`) +
            FfiConverterULong.allocationSize(value.`economyFee`) +
            FfiConverterULong.allocationSize(value.`minimumFee`)
    )

    override fun write(value: RecommendedFees, buf: ByteBuffer) {
            FfiConverterULong.write(value.`fastestFee`, buf)
            FfiConverterULong.write(value.`halfHourFee`, buf)
            FfiConverterULong.write(value.`hourFee`, buf)
            FfiConverterULong.write(value.`economyFee`, buf)
            FfiConverterULong.write(value.`minimumFee`, buf)
    }
}




data class ReverseSwapInfo (
    var `id`: String, 
    var `claimPubkey`: String, 
    var `onchainAmountSat`: ULong, 
    var `status`: ReverseSwapStatus
) {
    
}

public object FfiConverterTypeReverseSwapInfo: FfiConverterRustBuffer<ReverseSwapInfo> {
    override fun read(buf: ByteBuffer): ReverseSwapInfo {
        return ReverseSwapInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeReverseSwapStatus.read(buf),
        )
    }

    override fun allocationSize(value: ReverseSwapInfo) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`claimPubkey`) +
            FfiConverterULong.allocationSize(value.`onchainAmountSat`) +
            FfiConverterTypeReverseSwapStatus.allocationSize(value.`status`)
    )

    override fun write(value: ReverseSwapInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`claimPubkey`, buf)
            FfiConverterULong.write(value.`onchainAmountSat`, buf)
            FfiConverterTypeReverseSwapStatus.write(value.`status`, buf)
    }
}




data class ReverseSwapPairInfo (
    var `min`: ULong, 
    var `max`: ULong, 
    var `feesHash`: String, 
    var `feesPercentage`: Double, 
    var `feesLockup`: ULong, 
    var `feesClaim`: ULong
) {
    
}

public object FfiConverterTypeReverseSwapPairInfo: FfiConverterRustBuffer<ReverseSwapPairInfo> {
    override fun read(buf: ByteBuffer): ReverseSwapPairInfo {
        return ReverseSwapPairInfo(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: ReverseSwapPairInfo) = (
            FfiConverterULong.allocationSize(value.`min`) +
            FfiConverterULong.allocationSize(value.`max`) +
            FfiConverterString.allocationSize(value.`feesHash`) +
            FfiConverterDouble.allocationSize(value.`feesPercentage`) +
            FfiConverterULong.allocationSize(value.`feesLockup`) +
            FfiConverterULong.allocationSize(value.`feesClaim`)
    )

    override fun write(value: ReverseSwapPairInfo, buf: ByteBuffer) {
            FfiConverterULong.write(value.`min`, buf)
            FfiConverterULong.write(value.`max`, buf)
            FfiConverterString.write(value.`feesHash`, buf)
            FfiConverterDouble.write(value.`feesPercentage`, buf)
            FfiConverterULong.write(value.`feesLockup`, buf)
            FfiConverterULong.write(value.`feesClaim`, buf)
    }
}




data class RouteHint (
    var `hops`: List<RouteHintHop>
) {
    
}

public object FfiConverterTypeRouteHint: FfiConverterRustBuffer<RouteHint> {
    override fun read(buf: ByteBuffer): RouteHint {
        return RouteHint(
            FfiConverterSequenceTypeRouteHintHop.read(buf),
        )
    }

    override fun allocationSize(value: RouteHint) = (
            FfiConverterSequenceTypeRouteHintHop.allocationSize(value.`hops`)
    )

    override fun write(value: RouteHint, buf: ByteBuffer) {
            FfiConverterSequenceTypeRouteHintHop.write(value.`hops`, buf)
    }
}




data class RouteHintHop (
    var `srcNodeId`: String, 
    var `shortChannelId`: ULong, 
    var `feesBaseMsat`: UInt, 
    var `feesProportionalMillionths`: UInt, 
    var `cltvExpiryDelta`: ULong, 
    var `htlcMinimumMsat`: ULong?, 
    var `htlcMaximumMsat`: ULong?
) {
    
}

public object FfiConverterTypeRouteHintHop: FfiConverterRustBuffer<RouteHintHop> {
    override fun read(buf: ByteBuffer): RouteHintHop {
        return RouteHintHop(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: RouteHintHop) = (
            FfiConverterString.allocationSize(value.`srcNodeId`) +
            FfiConverterULong.allocationSize(value.`shortChannelId`) +
            FfiConverterUInt.allocationSize(value.`feesBaseMsat`) +
            FfiConverterUInt.allocationSize(value.`feesProportionalMillionths`) +
            FfiConverterULong.allocationSize(value.`cltvExpiryDelta`) +
            FfiConverterOptionalULong.allocationSize(value.`htlcMinimumMsat`) +
            FfiConverterOptionalULong.allocationSize(value.`htlcMaximumMsat`)
    )

    override fun write(value: RouteHintHop, buf: ByteBuffer) {
            FfiConverterString.write(value.`srcNodeId`, buf)
            FfiConverterULong.write(value.`shortChannelId`, buf)
            FfiConverterUInt.write(value.`feesBaseMsat`, buf)
            FfiConverterUInt.write(value.`feesProportionalMillionths`, buf)
            FfiConverterULong.write(value.`cltvExpiryDelta`, buf)
            FfiConverterOptionalULong.write(value.`htlcMinimumMsat`, buf)
            FfiConverterOptionalULong.write(value.`htlcMaximumMsat`, buf)
    }
}




data class SwapInfo (
    var `bitcoinAddress`: String, 
    var `createdAt`: Long, 
    var `lockHeight`: Long, 
    var `paymentHash`: List<UByte>, 
    var `preimage`: List<UByte>, 
    var `privateKey`: List<UByte>, 
    var `publicKey`: List<UByte>, 
    var `swapperPublicKey`: List<UByte>, 
    var `script`: List<UByte>, 
    var `bolt11`: String?, 
    var `paidSats`: ULong, 
    var `unconfirmedSats`: ULong, 
    var `confirmedSats`: ULong, 
    var `status`: SwapStatus, 
    var `refundTxIds`: List<String>, 
    var `unconfirmedTxIds`: List<String>, 
    var `confirmedTxIds`: List<String>, 
    var `minAllowedDeposit`: Long, 
    var `maxAllowedDeposit`: Long, 
    var `lastRedeemError`: String?
) {
    
}

public object FfiConverterTypeSwapInfo: FfiConverterRustBuffer<SwapInfo> {
    override fun read(buf: ByteBuffer): SwapInfo {
        return SwapInfo(
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeSwapStatus.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: SwapInfo) = (
            FfiConverterString.allocationSize(value.`bitcoinAddress`) +
            FfiConverterLong.allocationSize(value.`createdAt`) +
            FfiConverterLong.allocationSize(value.`lockHeight`) +
            FfiConverterSequenceUByte.allocationSize(value.`paymentHash`) +
            FfiConverterSequenceUByte.allocationSize(value.`preimage`) +
            FfiConverterSequenceUByte.allocationSize(value.`privateKey`) +
            FfiConverterSequenceUByte.allocationSize(value.`publicKey`) +
            FfiConverterSequenceUByte.allocationSize(value.`swapperPublicKey`) +
            FfiConverterSequenceUByte.allocationSize(value.`script`) +
            FfiConverterOptionalString.allocationSize(value.`bolt11`) +
            FfiConverterULong.allocationSize(value.`paidSats`) +
            FfiConverterULong.allocationSize(value.`unconfirmedSats`) +
            FfiConverterULong.allocationSize(value.`confirmedSats`) +
            FfiConverterTypeSwapStatus.allocationSize(value.`status`) +
            FfiConverterSequenceString.allocationSize(value.`refundTxIds`) +
            FfiConverterSequenceString.allocationSize(value.`unconfirmedTxIds`) +
            FfiConverterSequenceString.allocationSize(value.`confirmedTxIds`) +
            FfiConverterLong.allocationSize(value.`minAllowedDeposit`) +
            FfiConverterLong.allocationSize(value.`maxAllowedDeposit`) +
            FfiConverterOptionalString.allocationSize(value.`lastRedeemError`)
    )

    override fun write(value: SwapInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`bitcoinAddress`, buf)
            FfiConverterLong.write(value.`createdAt`, buf)
            FfiConverterLong.write(value.`lockHeight`, buf)
            FfiConverterSequenceUByte.write(value.`paymentHash`, buf)
            FfiConverterSequenceUByte.write(value.`preimage`, buf)
            FfiConverterSequenceUByte.write(value.`privateKey`, buf)
            FfiConverterSequenceUByte.write(value.`publicKey`, buf)
            FfiConverterSequenceUByte.write(value.`swapperPublicKey`, buf)
            FfiConverterSequenceUByte.write(value.`script`, buf)
            FfiConverterOptionalString.write(value.`bolt11`, buf)
            FfiConverterULong.write(value.`paidSats`, buf)
            FfiConverterULong.write(value.`unconfirmedSats`, buf)
            FfiConverterULong.write(value.`confirmedSats`, buf)
            FfiConverterTypeSwapStatus.write(value.`status`, buf)
            FfiConverterSequenceString.write(value.`refundTxIds`, buf)
            FfiConverterSequenceString.write(value.`unconfirmedTxIds`, buf)
            FfiConverterSequenceString.write(value.`confirmedTxIds`, buf)
            FfiConverterLong.write(value.`minAllowedDeposit`, buf)
            FfiConverterLong.write(value.`maxAllowedDeposit`, buf)
            FfiConverterOptionalString.write(value.`lastRedeemError`, buf)
    }
}




data class Symbol (
    var `grapheme`: String?, 
    var `template`: String?, 
    var `rtl`: Boolean?, 
    var `position`: UInt?
) {
    
}

public object FfiConverterTypeSymbol: FfiConverterRustBuffer<Symbol> {
    override fun read(buf: ByteBuffer): Symbol {
        return Symbol(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalUInt.read(buf),
        )
    }

    override fun allocationSize(value: Symbol) = (
            FfiConverterOptionalString.allocationSize(value.`grapheme`) +
            FfiConverterOptionalString.allocationSize(value.`template`) +
            FfiConverterOptionalBoolean.allocationSize(value.`rtl`) +
            FfiConverterOptionalUInt.allocationSize(value.`position`)
    )

    override fun write(value: Symbol, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`grapheme`, buf)
            FfiConverterOptionalString.write(value.`template`, buf)
            FfiConverterOptionalBoolean.write(value.`rtl`, buf)
            FfiConverterOptionalUInt.write(value.`position`, buf)
    }
}




data class UnspentTransactionOutput (
    var `txid`: List<UByte>, 
    var `outnum`: UInt, 
    var `amountMillisatoshi`: ULong, 
    var `address`: String, 
    var `reserved`: Boolean, 
    var `reservedToBlock`: UInt
) {
    
}

public object FfiConverterTypeUnspentTransactionOutput: FfiConverterRustBuffer<UnspentTransactionOutput> {
    override fun read(buf: ByteBuffer): UnspentTransactionOutput {
        return UnspentTransactionOutput(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: UnspentTransactionOutput) = (
            FfiConverterSequenceUByte.allocationSize(value.`txid`) +
            FfiConverterUInt.allocationSize(value.`outnum`) +
            FfiConverterULong.allocationSize(value.`amountMillisatoshi`) +
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterBoolean.allocationSize(value.`reserved`) +
            FfiConverterUInt.allocationSize(value.`reservedToBlock`)
    )

    override fun write(value: UnspentTransactionOutput, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`txid`, buf)
            FfiConverterUInt.write(value.`outnum`, buf)
            FfiConverterULong.write(value.`amountMillisatoshi`, buf)
            FfiConverterString.write(value.`address`, buf)
            FfiConverterBoolean.write(value.`reserved`, buf)
            FfiConverterUInt.write(value.`reservedToBlock`, buf)
    }
}




data class UrlSuccessActionData (
    var `description`: String, 
    var `url`: String
) {
    
}

public object FfiConverterTypeUrlSuccessActionData: FfiConverterRustBuffer<UrlSuccessActionData> {
    override fun read(buf: ByteBuffer): UrlSuccessActionData {
        return UrlSuccessActionData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: UrlSuccessActionData) = (
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterString.allocationSize(value.`url`)
    )

    override fun write(value: UrlSuccessActionData, buf: ByteBuffer) {
            FfiConverterString.write(value.`description`, buf)
            FfiConverterString.write(value.`url`, buf)
    }
}




sealed class BreezEvent {
    data class NewBlock(
        val `block`: UInt
        ) : BreezEvent()
    data class InvoicePaid(
        val `details`: InvoicePaidDetails
        ) : BreezEvent()
    object Synced : BreezEvent()
    
    data class PaymentSucceed(
        val `details`: Payment
        ) : BreezEvent()
    data class PaymentFailed(
        val `details`: PaymentFailedData
        ) : BreezEvent()
    object BackupStarted : BreezEvent()
    
    object BackupSucceeded : BreezEvent()
    
    data class BackupFailed(
        val `details`: BackupFailedData
        ) : BreezEvent()
    

    
}

public object FfiConverterTypeBreezEvent : FfiConverterRustBuffer<BreezEvent>{
    override fun read(buf: ByteBuffer): BreezEvent {
        return when(buf.getInt()) {
            1 -> BreezEvent.NewBlock(
                FfiConverterUInt.read(buf),
                )
            2 -> BreezEvent.InvoicePaid(
                FfiConverterTypeInvoicePaidDetails.read(buf),
                )
            3 -> BreezEvent.Synced
            4 -> BreezEvent.PaymentSucceed(
                FfiConverterTypePayment.read(buf),
                )
            5 -> BreezEvent.PaymentFailed(
                FfiConverterTypePaymentFailedData.read(buf),
                )
            6 -> BreezEvent.BackupStarted
            7 -> BreezEvent.BackupSucceeded
            8 -> BreezEvent.BackupFailed(
                FfiConverterTypeBackupFailedData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: BreezEvent) = when(value) {
        is BreezEvent.NewBlock -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterUInt.allocationSize(value.`block`)
            )
        }
        is BreezEvent.InvoicePaid -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeInvoicePaidDetails.allocationSize(value.`details`)
            )
        }
        is BreezEvent.Synced -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is BreezEvent.PaymentSucceed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypePayment.allocationSize(value.`details`)
            )
        }
        is BreezEvent.PaymentFailed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypePaymentFailedData.allocationSize(value.`details`)
            )
        }
        is BreezEvent.BackupStarted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is BreezEvent.BackupSucceeded -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is BreezEvent.BackupFailed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeBackupFailedData.allocationSize(value.`details`)
            )
        }
    }

    override fun write(value: BreezEvent, buf: ByteBuffer) {
        when(value) {
            is BreezEvent.NewBlock -> {
                buf.putInt(1)
                FfiConverterUInt.write(value.`block`, buf)
                Unit
            }
            is BreezEvent.InvoicePaid -> {
                buf.putInt(2)
                FfiConverterTypeInvoicePaidDetails.write(value.`details`, buf)
                Unit
            }
            is BreezEvent.Synced -> {
                buf.putInt(3)
                Unit
            }
            is BreezEvent.PaymentSucceed -> {
                buf.putInt(4)
                FfiConverterTypePayment.write(value.`details`, buf)
                Unit
            }
            is BreezEvent.PaymentFailed -> {
                buf.putInt(5)
                FfiConverterTypePaymentFailedData.write(value.`details`, buf)
                Unit
            }
            is BreezEvent.BackupStarted -> {
                buf.putInt(6)
                Unit
            }
            is BreezEvent.BackupSucceeded -> {
                buf.putInt(7)
                Unit
            }
            is BreezEvent.BackupFailed -> {
                buf.putInt(8)
                FfiConverterTypeBackupFailedData.write(value.`details`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class BuyBitcoinProvider {
    MOONPAY;
}

public object FfiConverterTypeBuyBitcoinProvider: FfiConverterRustBuffer<BuyBitcoinProvider> {
    override fun read(buf: ByteBuffer) = try {
        BuyBitcoinProvider.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BuyBitcoinProvider) = 4

    override fun write(value: BuyBitcoinProvider, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ChannelState {
    PENDING_OPEN,OPENED,PENDING_CLOSE,CLOSED;
}

public object FfiConverterTypeChannelState: FfiConverterRustBuffer<ChannelState> {
    override fun read(buf: ByteBuffer) = try {
        ChannelState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ChannelState) = 4

    override fun write(value: ChannelState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class EnvironmentType {
    PRODUCTION,STAGING;
}

public object FfiConverterTypeEnvironmentType: FfiConverterRustBuffer<EnvironmentType> {
    override fun read(buf: ByteBuffer) = try {
        EnvironmentType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: EnvironmentType) = 4

    override fun write(value: EnvironmentType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class FeeratePreset {
    REGULAR,ECONOMY,PRIORITY;
}

public object FfiConverterTypeFeeratePreset: FfiConverterRustBuffer<FeeratePreset> {
    override fun read(buf: ByteBuffer) = try {
        FeeratePreset.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FeeratePreset) = 4

    override fun write(value: FeeratePreset, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class InputType {
    data class BitcoinAddress(
        val `address`: BitcoinAddressData
        ) : InputType()
    data class Bolt11(
        val `invoice`: LnInvoice
        ) : InputType()
    data class NodeId(
        val `nodeId`: String
        ) : InputType()
    data class Url(
        val `url`: String
        ) : InputType()
    data class LnUrlPay(
        val `data`: LnUrlPayRequestData
        ) : InputType()
    data class LnUrlWithdraw(
        val `data`: LnUrlWithdrawRequestData
        ) : InputType()
    data class LnUrlAuth(
        val `data`: LnUrlAuthRequestData
        ) : InputType()
    data class LnUrlError(
        val `data`: LnUrlErrorData
        ) : InputType()
    

    
}

public object FfiConverterTypeInputType : FfiConverterRustBuffer<InputType>{
    override fun read(buf: ByteBuffer): InputType {
        return when(buf.getInt()) {
            1 -> InputType.BitcoinAddress(
                FfiConverterTypeBitcoinAddressData.read(buf),
                )
            2 -> InputType.Bolt11(
                FfiConverterTypeLnInvoice.read(buf),
                )
            3 -> InputType.NodeId(
                FfiConverterString.read(buf),
                )
            4 -> InputType.Url(
                FfiConverterString.read(buf),
                )
            5 -> InputType.LnUrlPay(
                FfiConverterTypeLnUrlPayRequestData.read(buf),
                )
            6 -> InputType.LnUrlWithdraw(
                FfiConverterTypeLnUrlWithdrawRequestData.read(buf),
                )
            7 -> InputType.LnUrlAuth(
                FfiConverterTypeLnUrlAuthRequestData.read(buf),
                )
            8 -> InputType.LnUrlError(
                FfiConverterTypeLnUrlErrorData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: InputType) = when(value) {
        is InputType.BitcoinAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeBitcoinAddressData.allocationSize(value.`address`)
            )
        }
        is InputType.Bolt11 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnInvoice.allocationSize(value.`invoice`)
            )
        }
        is InputType.NodeId -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`nodeId`)
            )
        }
        is InputType.Url -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`url`)
            )
        }
        is InputType.LnUrlPay -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlPayRequestData.allocationSize(value.`data`)
            )
        }
        is InputType.LnUrlWithdraw -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlWithdrawRequestData.allocationSize(value.`data`)
            )
        }
        is InputType.LnUrlAuth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlAuthRequestData.allocationSize(value.`data`)
            )
        }
        is InputType.LnUrlError -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlErrorData.allocationSize(value.`data`)
            )
        }
    }

    override fun write(value: InputType, buf: ByteBuffer) {
        when(value) {
            is InputType.BitcoinAddress -> {
                buf.putInt(1)
                FfiConverterTypeBitcoinAddressData.write(value.`address`, buf)
                Unit
            }
            is InputType.Bolt11 -> {
                buf.putInt(2)
                FfiConverterTypeLnInvoice.write(value.`invoice`, buf)
                Unit
            }
            is InputType.NodeId -> {
                buf.putInt(3)
                FfiConverterString.write(value.`nodeId`, buf)
                Unit
            }
            is InputType.Url -> {
                buf.putInt(4)
                FfiConverterString.write(value.`url`, buf)
                Unit
            }
            is InputType.LnUrlPay -> {
                buf.putInt(5)
                FfiConverterTypeLnUrlPayRequestData.write(value.`data`, buf)
                Unit
            }
            is InputType.LnUrlWithdraw -> {
                buf.putInt(6)
                FfiConverterTypeLnUrlWithdrawRequestData.write(value.`data`, buf)
                Unit
            }
            is InputType.LnUrlAuth -> {
                buf.putInt(7)
                FfiConverterTypeLnUrlAuthRequestData.write(value.`data`, buf)
                Unit
            }
            is InputType.LnUrlError -> {
                buf.putInt(8)
                FfiConverterTypeLnUrlErrorData.write(value.`data`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class LnUrlCallbackStatus {
    object Ok : LnUrlCallbackStatus()
    
    data class ErrorStatus(
        val `data`: LnUrlErrorData
        ) : LnUrlCallbackStatus()
    

    
}

public object FfiConverterTypeLnUrlCallbackStatus : FfiConverterRustBuffer<LnUrlCallbackStatus>{
    override fun read(buf: ByteBuffer): LnUrlCallbackStatus {
        return when(buf.getInt()) {
            1 -> LnUrlCallbackStatus.Ok
            2 -> LnUrlCallbackStatus.ErrorStatus(
                FfiConverterTypeLnUrlErrorData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LnUrlCallbackStatus) = when(value) {
        is LnUrlCallbackStatus.Ok -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is LnUrlCallbackStatus.ErrorStatus -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlErrorData.allocationSize(value.`data`)
            )
        }
    }

    override fun write(value: LnUrlCallbackStatus, buf: ByteBuffer) {
        when(value) {
            is LnUrlCallbackStatus.Ok -> {
                buf.putInt(1)
                Unit
            }
            is LnUrlCallbackStatus.ErrorStatus -> {
                buf.putInt(2)
                FfiConverterTypeLnUrlErrorData.write(value.`data`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class LnUrlPayResult {
    data class EndpointSuccess(
        val `data`: SuccessActionProcessed?
        ) : LnUrlPayResult()
    data class EndpointError(
        val `data`: LnUrlErrorData
        ) : LnUrlPayResult()
    

    
}

public object FfiConverterTypeLnUrlPayResult : FfiConverterRustBuffer<LnUrlPayResult>{
    override fun read(buf: ByteBuffer): LnUrlPayResult {
        return when(buf.getInt()) {
            1 -> LnUrlPayResult.EndpointSuccess(
                FfiConverterOptionalTypeSuccessActionProcessed.read(buf),
                )
            2 -> LnUrlPayResult.EndpointError(
                FfiConverterTypeLnUrlErrorData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LnUrlPayResult) = when(value) {
        is LnUrlPayResult.EndpointSuccess -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterOptionalTypeSuccessActionProcessed.allocationSize(value.`data`)
            )
        }
        is LnUrlPayResult.EndpointError -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlErrorData.allocationSize(value.`data`)
            )
        }
    }

    override fun write(value: LnUrlPayResult, buf: ByteBuffer) {
        when(value) {
            is LnUrlPayResult.EndpointSuccess -> {
                buf.putInt(1)
                FfiConverterOptionalTypeSuccessActionProcessed.write(value.`data`, buf)
                Unit
            }
            is LnUrlPayResult.EndpointError -> {
                buf.putInt(2)
                FfiConverterTypeLnUrlErrorData.write(value.`data`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class Network {
    BITCOIN,TESTNET,SIGNET,REGTEST;
}

public object FfiConverterTypeNetwork: FfiConverterRustBuffer<Network> {
    override fun read(buf: ByteBuffer) = try {
        Network.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: Network) = 4

    override fun write(value: Network, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class PaymentDetails {
    data class Ln(
        val `data`: LnPaymentDetails
        ) : PaymentDetails()
    data class ClosedChannel(
        val `data`: ClosedChannelPaymentDetails
        ) : PaymentDetails()
    

    
}

public object FfiConverterTypePaymentDetails : FfiConverterRustBuffer<PaymentDetails>{
    override fun read(buf: ByteBuffer): PaymentDetails {
        return when(buf.getInt()) {
            1 -> PaymentDetails.Ln(
                FfiConverterTypeLnPaymentDetails.read(buf),
                )
            2 -> PaymentDetails.ClosedChannel(
                FfiConverterTypeClosedChannelPaymentDetails.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: PaymentDetails) = when(value) {
        is PaymentDetails.Ln -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnPaymentDetails.allocationSize(value.`data`)
            )
        }
        is PaymentDetails.ClosedChannel -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeClosedChannelPaymentDetails.allocationSize(value.`data`)
            )
        }
    }

    override fun write(value: PaymentDetails, buf: ByteBuffer) {
        when(value) {
            is PaymentDetails.Ln -> {
                buf.putInt(1)
                FfiConverterTypeLnPaymentDetails.write(value.`data`, buf)
                Unit
            }
            is PaymentDetails.ClosedChannel -> {
                buf.putInt(2)
                FfiConverterTypeClosedChannelPaymentDetails.write(value.`data`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class PaymentType {
    SENT,RECEIVED,CLOSED_CHANNEL;
}

public object FfiConverterTypePaymentType: FfiConverterRustBuffer<PaymentType> {
    override fun read(buf: ByteBuffer) = try {
        PaymentType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentType) = 4

    override fun write(value: PaymentType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PaymentTypeFilter {
    SENT,RECEIVED,ALL;
}

public object FfiConverterTypePaymentTypeFilter: FfiConverterRustBuffer<PaymentTypeFilter> {
    override fun read(buf: ByteBuffer) = try {
        PaymentTypeFilter.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentTypeFilter) = 4

    override fun write(value: PaymentTypeFilter, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ReverseSwapStatus {
    INITIAL,IN_PROGRESS,CANCELLED,COMPLETED_SEEN,COMPLETED_CONFIRMED;
}

public object FfiConverterTypeReverseSwapStatus: FfiConverterRustBuffer<ReverseSwapStatus> {
    override fun read(buf: ByteBuffer) = try {
        ReverseSwapStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ReverseSwapStatus) = 4

    override fun write(value: ReverseSwapStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class SuccessActionProcessed {
    data class Aes(
        val `data`: AesSuccessActionDataDecrypted
        ) : SuccessActionProcessed()
    data class Message(
        val `data`: MessageSuccessActionData
        ) : SuccessActionProcessed()
    data class Url(
        val `data`: UrlSuccessActionData
        ) : SuccessActionProcessed()
    

    
}

public object FfiConverterTypeSuccessActionProcessed : FfiConverterRustBuffer<SuccessActionProcessed>{
    override fun read(buf: ByteBuffer): SuccessActionProcessed {
        return when(buf.getInt()) {
            1 -> SuccessActionProcessed.Aes(
                FfiConverterTypeAesSuccessActionDataDecrypted.read(buf),
                )
            2 -> SuccessActionProcessed.Message(
                FfiConverterTypeMessageSuccessActionData.read(buf),
                )
            3 -> SuccessActionProcessed.Url(
                FfiConverterTypeUrlSuccessActionData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SuccessActionProcessed) = when(value) {
        is SuccessActionProcessed.Aes -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeAesSuccessActionDataDecrypted.allocationSize(value.`data`)
            )
        }
        is SuccessActionProcessed.Message -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeMessageSuccessActionData.allocationSize(value.`data`)
            )
        }
        is SuccessActionProcessed.Url -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeUrlSuccessActionData.allocationSize(value.`data`)
            )
        }
    }

    override fun write(value: SuccessActionProcessed, buf: ByteBuffer) {
        when(value) {
            is SuccessActionProcessed.Aes -> {
                buf.putInt(1)
                FfiConverterTypeAesSuccessActionDataDecrypted.write(value.`data`, buf)
                Unit
            }
            is SuccessActionProcessed.Message -> {
                buf.putInt(2)
                FfiConverterTypeMessageSuccessActionData.write(value.`data`, buf)
                Unit
            }
            is SuccessActionProcessed.Url -> {
                buf.putInt(3)
                FfiConverterTypeUrlSuccessActionData.write(value.`data`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class SwapStatus {
    INITIAL,EXPIRED;
}

public object FfiConverterTypeSwapStatus: FfiConverterRustBuffer<SwapStatus> {
    override fun read(buf: ByteBuffer) = try {
        SwapStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: SwapStatus) = 4

    override fun write(value: SwapStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class SdkException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class Exception(message: String) : SdkException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<SdkException> {
        override fun lift(error_buf: RustBuffer.ByValue): SdkException = FfiConverterTypeSdkError.lift(error_buf)
    }
}

public object FfiConverterTypeSdkError : FfiConverterRustBuffer<SdkException> {
    override fun read(buf: ByteBuffer): SdkException {
        
            return when(buf.getInt()) {
            1 -> SdkException.Exception(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: SdkException): Int {
        return 4
    }

    override fun write(value: SdkException, buf: ByteBuffer) {
        when(value) {
            is SdkException.Exception -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for EventListener Callback Interface

public interface EventListener {
    fun `onEvent`(`e`: BreezEvent)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeEventListener : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeEventListener.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeEventListener.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeOnEvent`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeOnEvent`(kotlinCallbackInterface: EventListener, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`onEvent`(
                    FfiConverterTypeBreezEvent.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeEventListener: FfiConverterCallbackInterface<EventListener>(
    foreignCallback = ForeignCallbackTypeEventListener()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_breez_sdk_5d07_EventListener_init_callback(this.foreignCallback, status)
        }
    }
}






// Declaration and FfiConverters for LogStream Callback Interface

public interface LogStream {
    fun `log`(`l`: LogEntry)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeLogStream : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeLogStream.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeLogStream.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeLog`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeLog`(kotlinCallbackInterface: LogStream, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`log`(
                    FfiConverterTypeLogEntry.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeLogStream: FfiConverterCallbackInterface<LogStream>(
    foreignCallback = ForeignCallbackTypeLogStream()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_breez_sdk_5d07_LogStream_init_callback(this.foreignCallback, status)
        }
    }
}




public object FfiConverterOptionalUInt: FfiConverterRustBuffer<UInt?> {
    override fun read(buf: ByteBuffer): UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: UInt?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalLong: FfiConverterRustBuffer<Long?> {
    override fun read(buf: ByteBuffer): Long? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterLong.read(buf)
    }

    override fun allocationSize(value: Long?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterLong.allocationSize(value)
        }
    }

    override fun write(value: Long?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterLong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalBoolean: FfiConverterRustBuffer<Boolean?> {
    override fun read(buf: ByteBuffer): Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: Boolean?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeGreenlightCredentials: FfiConverterRustBuffer<GreenlightCredentials?> {
    override fun read(buf: ByteBuffer): GreenlightCredentials? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeGreenlightCredentials.read(buf)
    }

    override fun allocationSize(value: GreenlightCredentials?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeGreenlightCredentials.allocationSize(value)
        }
    }

    override fun write(value: GreenlightCredentials?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeGreenlightCredentials.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeLnInvoice: FfiConverterRustBuffer<LnInvoice?> {
    override fun read(buf: ByteBuffer): LnInvoice? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeLnInvoice.read(buf)
    }

    override fun allocationSize(value: LnInvoice?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeLnInvoice.allocationSize(value)
        }
    }

    override fun write(value: LnInvoice?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeLnInvoice.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeLspInformation: FfiConverterRustBuffer<LspInformation?> {
    override fun read(buf: ByteBuffer): LspInformation? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeLspInformation.read(buf)
    }

    override fun allocationSize(value: LspInformation?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeLspInformation.allocationSize(value)
        }
    }

    override fun write(value: LspInformation?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeLspInformation.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeNodeState: FfiConverterRustBuffer<NodeState?> {
    override fun read(buf: ByteBuffer): NodeState? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeNodeState.read(buf)
    }

    override fun allocationSize(value: NodeState?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeNodeState.allocationSize(value)
        }
    }

    override fun write(value: NodeState?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeNodeState.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePayment: FfiConverterRustBuffer<Payment?> {
    override fun read(buf: ByteBuffer): Payment? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePayment.read(buf)
    }

    override fun allocationSize(value: Payment?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypePayment.allocationSize(value)
        }
    }

    override fun write(value: Payment?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePayment.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSwapInfo: FfiConverterRustBuffer<SwapInfo?> {
    override fun read(buf: ByteBuffer): SwapInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSwapInfo.read(buf)
    }

    override fun allocationSize(value: SwapInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSwapInfo.allocationSize(value)
        }
    }

    override fun write(value: SwapInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSwapInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSymbol: FfiConverterRustBuffer<Symbol?> {
    override fun read(buf: ByteBuffer): Symbol? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSymbol.read(buf)
    }

    override fun allocationSize(value: Symbol?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSymbol.allocationSize(value)
        }
    }

    override fun write(value: Symbol?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSymbol.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSuccessActionProcessed: FfiConverterRustBuffer<SuccessActionProcessed?> {
    override fun read(buf: ByteBuffer): SuccessActionProcessed? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSuccessActionProcessed.read(buf)
    }

    override fun allocationSize(value: SuccessActionProcessed?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSuccessActionProcessed.allocationSize(value)
        }
    }

    override fun write(value: SuccessActionProcessed?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSuccessActionProcessed.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeLocaleOverrides: FfiConverterRustBuffer<List<LocaleOverrides>?> {
    override fun read(buf: ByteBuffer): List<LocaleOverrides>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeLocaleOverrides.read(buf)
    }

    override fun allocationSize(value: List<LocaleOverrides>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceTypeLocaleOverrides.allocationSize(value)
        }
    }

    override fun write(value: List<LocaleOverrides>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeLocaleOverrides.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeLocalizedName: FfiConverterRustBuffer<List<LocalizedName>?> {
    override fun read(buf: ByteBuffer): List<LocalizedName>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeLocalizedName.read(buf)
    }

    override fun allocationSize(value: List<LocalizedName>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceTypeLocalizedName.allocationSize(value)
        }
    }

    override fun write(value: List<LocalizedName>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeLocalizedName.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFiatCurrency: FfiConverterRustBuffer<List<FiatCurrency>> {
    override fun read(buf: ByteBuffer): List<FiatCurrency> {
        val len = buf.getInt()
        return List<FiatCurrency>(len) {
            FfiConverterTypeFiatCurrency.read(buf)
        }
    }

    override fun allocationSize(value: List<FiatCurrency>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFiatCurrency.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FiatCurrency>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFiatCurrency.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeLocaleOverrides: FfiConverterRustBuffer<List<LocaleOverrides>> {
    override fun read(buf: ByteBuffer): List<LocaleOverrides> {
        val len = buf.getInt()
        return List<LocaleOverrides>(len) {
            FfiConverterTypeLocaleOverrides.read(buf)
        }
    }

    override fun allocationSize(value: List<LocaleOverrides>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeLocaleOverrides.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<LocaleOverrides>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeLocaleOverrides.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeLocalizedName: FfiConverterRustBuffer<List<LocalizedName>> {
    override fun read(buf: ByteBuffer): List<LocalizedName> {
        val len = buf.getInt()
        return List<LocalizedName>(len) {
            FfiConverterTypeLocalizedName.read(buf)
        }
    }

    override fun allocationSize(value: List<LocalizedName>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeLocalizedName.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<LocalizedName>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeLocalizedName.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeLspInformation: FfiConverterRustBuffer<List<LspInformation>> {
    override fun read(buf: ByteBuffer): List<LspInformation> {
        val len = buf.getInt()
        return List<LspInformation>(len) {
            FfiConverterTypeLspInformation.read(buf)
        }
    }

    override fun allocationSize(value: List<LspInformation>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeLspInformation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<LspInformation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeLspInformation.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePayment: FfiConverterRustBuffer<List<Payment>> {
    override fun read(buf: ByteBuffer): List<Payment> {
        val len = buf.getInt()
        return List<Payment>(len) {
            FfiConverterTypePayment.read(buf)
        }
    }

    override fun allocationSize(value: List<Payment>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypePayment.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Payment>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypePayment.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRate: FfiConverterRustBuffer<List<Rate>> {
    override fun read(buf: ByteBuffer): List<Rate> {
        val len = buf.getInt()
        return List<Rate>(len) {
            FfiConverterTypeRate.read(buf)
        }
    }

    override fun allocationSize(value: List<Rate>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeRate.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Rate>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeRate.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeReverseSwapInfo: FfiConverterRustBuffer<List<ReverseSwapInfo>> {
    override fun read(buf: ByteBuffer): List<ReverseSwapInfo> {
        val len = buf.getInt()
        return List<ReverseSwapInfo>(len) {
            FfiConverterTypeReverseSwapInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<ReverseSwapInfo>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeReverseSwapInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ReverseSwapInfo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeReverseSwapInfo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRouteHint: FfiConverterRustBuffer<List<RouteHint>> {
    override fun read(buf: ByteBuffer): List<RouteHint> {
        val len = buf.getInt()
        return List<RouteHint>(len) {
            FfiConverterTypeRouteHint.read(buf)
        }
    }

    override fun allocationSize(value: List<RouteHint>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeRouteHint.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RouteHint>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeRouteHint.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRouteHintHop: FfiConverterRustBuffer<List<RouteHintHop>> {
    override fun read(buf: ByteBuffer): List<RouteHintHop> {
        val len = buf.getInt()
        return List<RouteHintHop>(len) {
            FfiConverterTypeRouteHintHop.read(buf)
        }
    }

    override fun allocationSize(value: List<RouteHintHop>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeRouteHintHop.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RouteHintHop>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeRouteHintHop.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeSwapInfo: FfiConverterRustBuffer<List<SwapInfo>> {
    override fun read(buf: ByteBuffer): List<SwapInfo> {
        val len = buf.getInt()
        return List<SwapInfo>(len) {
            FfiConverterTypeSwapInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<SwapInfo>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeSwapInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SwapInfo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeSwapInfo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeUnspentTransactionOutput: FfiConverterRustBuffer<List<UnspentTransactionOutput>> {
    override fun read(buf: ByteBuffer): List<UnspentTransactionOutput> {
        val len = buf.getInt()
        return List<UnspentTransactionOutput>(len) {
            FfiConverterTypeUnspentTransactionOutput.read(buf)
        }
    }

    override fun allocationSize(value: List<UnspentTransactionOutput>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeUnspentTransactionOutput.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UnspentTransactionOutput>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeUnspentTransactionOutput.write(it, buf)
        }
    }
}
@Throws(SdkException::class)

fun `registerNode`(`network`: Network, `seed`: List<UByte>, `registerCredentials`: GreenlightCredentials?, `inviteCode`: String?): GreenlightCredentials {
    return FfiConverterTypeGreenlightCredentials.lift(
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_register_node(FfiConverterTypeNetwork.lower(`network`), FfiConverterSequenceUByte.lower(`seed`), FfiConverterOptionalTypeGreenlightCredentials.lower(`registerCredentials`), FfiConverterOptionalString.lower(`inviteCode`), _status)
})
}


@Throws(SdkException::class)

fun `recoverNode`(`network`: Network, `seed`: List<UByte>): GreenlightCredentials {
    return FfiConverterTypeGreenlightCredentials.lift(
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_recover_node(FfiConverterTypeNetwork.lower(`network`), FfiConverterSequenceUByte.lower(`seed`), _status)
})
}


@Throws(SdkException::class)

fun `initServices`(`config`: Config, `seed`: List<UByte>, `creds`: GreenlightCredentials, `listener`: EventListener): BlockingBreezServices {
    return FfiConverterTypeBlockingBreezServices.lift(
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_init_services(FfiConverterTypeConfig.lower(`config`), FfiConverterSequenceUByte.lower(`seed`), FfiConverterTypeGreenlightCredentials.lower(`creds`), FfiConverterTypeEventListener.lower(`listener`), _status)
})
}


@Throws(SdkException::class)

fun `setLogStream`(`logStream`: LogStream) =
    
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_set_log_stream(FfiConverterTypeLogStream.lower(`logStream`), _status)
}

@Throws(SdkException::class)

fun `parseInvoice`(`invoice`: String): LnInvoice {
    return FfiConverterTypeLnInvoice.lift(
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_parse_invoice(FfiConverterString.lower(`invoice`), _status)
})
}


@Throws(SdkException::class)

fun `parseInput`(`s`: String): InputType {
    return FfiConverterTypeInputType.lift(
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_parse_input(FfiConverterString.lower(`s`), _status)
})
}


@Throws(SdkException::class)

fun `mnemonicToSeed`(`phrase`: String): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(SdkException) { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_mnemonic_to_seed(FfiConverterString.lower(`phrase`), _status)
})
}



fun `defaultConfig`(`envType`: EnvironmentType): Config {
    return FfiConverterTypeConfig.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.breez_sdk_5d07_default_config(FfiConverterTypeEnvironmentType.lower(`envType`), _status)
})
}




